#!/usr/bin/env perl
# Insert publication templates into the database

use warnings;
use strict;

use HTML::Entities qw(encode_entities);
use File::Basename qw(dirname);
use JSON           qw(decode_json);

use Taranis::Install::DB qw(connect_db);

my $templ_dir = dirname($0) . '/db-publ-templates';
my $db        = connect_db;

my $indexfn = "$templ_dir/00INDEX.json";
-f $indexfn
	or die "ERROR: index file $indexfn does not exist";

my $index;
{	local $/;
	open my $fh, "<:encoding(utf8)", $indexfn
		or die "ERROR: cannot read $indexfn";
	$index = decode_json <$fh>;
}

foreach my $templ (@$index) {
	my $ttitle = $templ->{type_title};
	my $pt = $db->query(<<'_TYPE_ID', $ttitle)->list;
SELECT id FROM publication_type WHERE title = ?
_TYPE_ID

	unless($pt) {
		print "*   creating type $ttitle\n";
		my $td = $templ->{type_description};
		$pt = $db->insert(publication_type => {
			title       => encode_entities($ttitle),
			description => ($td ? encode_entities($td) : undef),
		}, { returning => 'id' })->list;
	}

	#warn "publication template type = $ttitle = $pt\n";

	my $title = $templ->{title};
	defined $title or next;   # no template for type

	my $has = $db->query(<<'__TEMPL', $templ->{title})->hash;
SELECT id FROM publication_template WHERE title = ?
__TEMPL

	next if $has;

	my $templ_fn = "$templ_dir/$templ->{template}";
	-f $templ_fn or die "ERROR: cannot find $templ_fn";

	my $template;
	{	local $/;

		open my $fh, "<:encoding(utf8)", $templ_fn
			or die "ERROR: cannot read $templ_fn: $!";

		$template = <$fh>;
	}

	my $pd = $templ->{description};
	my $tid = $db->insert(publication_template => {
		title => encode_entities($title),
		description => ($pd ? encode_entities($pd) : undef),
		template => encode_entities($template),
		type => $pt,
	}, {returning => 'id'})->list;

	print "*   inserted template $tid: $title.\n";
}
