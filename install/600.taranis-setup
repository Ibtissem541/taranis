#!/usr/bin/env perl
# Attempt to collect local files from an pre-3.3 installation.
#
# Since 3.4, the files which are used for a specific instance are *not*
# merged with data from the distribution anymore.  That will make
# upgrades much easier and safer.  Let's try to automatically collect
# the changes and put them on their new spot.

use warnings;
use strict;

use Carp           qw(confess);
use File::Copy     qw(copy);
use File::Basename qw(basename);
use File::Glob     qw(bsd_glob);
use File::Spec::Functions qw(rel2abs);
use XML::Simple    ();

use Taranis::Install::Bare   qw(clone_dir);
use Taranis::Install::Config qw(config_generic config_release taranis_sources
	become_user_taranis taranis_config_fn);

sub reorder_main_options();
sub init_main_emails();
sub create_dir($);
sub copy_file($$);

my $generic   = config_generic;

my $dest_main_fn = taranis_config_fn;
exit 0 if -f $dest_main_fn;

my $release   = config_release;
my $version   = $release->{version}  or die "no version";
my $username  = $generic->{username} or die "no username";

# ~/var contains configurations which need to be migrated from one installation
# to the next; additional to the database data.
my $var       = $generic->{var};
my $tmp       = $release->{tmp};
my $logs      = $release->{logs};

my ($userid, $groupid) = (getpwnam $username)[2,3];

my $migrate   = $ENV{TARANIS_MIGRATE};
my $migrating = defined $migrate && -d $migrate
	&& -f "$migrate/conf/taranis.conf.xml";

my ($src, $src_main_fn);
if($migrating) {
	print "**  migrating 3.3 configuration\n";
	$src         = $migrate;
	$src_main_fn = "$src/conf/taranis.conf.xml";
} else {
	$src         = taranis_sources $version;
	$src_main_fn = "$src/conf/taranis.conf.xml-dist";
}

my $xs   = XML::Simple->new(KeepRoot => 1, KeyAttr => [],
	NormaliseSpace => 2, SuppressEmpty => '');

my $root = eval { $xs->XMLin($src_main_fn) }
	or die "ERROR: cannot parse xml in $src_main_fn:\n   $@\n";

#use Data::Dumper;
#warn Dumper $root;

my $main_config = $root->{parameters};

reorder_main_options;
$migrating or init_main_emails;

# We need to be root to assure we can access the files which get
# migrated from a previous install.  But now that is ready, we can
# degrade our rights.

become_user_taranis;

open my $dest, '>:encoding(utf8)', $dest_main_fn
	or die "ERROR: cannot write main config to $dest_main_fn: $!\n";

$dest->print($xs->XMLout($root, NoAttr => 1));

$dest->close;

exit 0;

=for TODO

Collect changes from
  backend_tools
  scripts/mod_tools
  templates/
  webinterface/

=cut

sub create_dir($) {
	my $dir = shift;

	-d $dir
		or print "*   create directory $dir\n";

	-d $dir or mkdir $dir
		or die "ERROR: cannot create directory: $!\n";

	chown $userid, $groupid, $dir
		or die "ERROR: cannot re-own directory: $!\n";

	$dir;
}

sub copy_file($$) {
	my ($from, $to) = @_;
	copy $from, $to
		or die "ERROR: cannot copy $from to $to: $!\n";

	chown $userid, $groupid, $to
		or die "ERROR: cannot re-own file $to: $!\n";

	# At least the taranis user and apache may attempt to write them
	chmod 0666, $to;
}

# Remove options which were not used in 3.3, or victimized by
# changes in 3.4

sub remove_expired_options() {

	my @expired = qw(
		master_slave
		ttroot
		pidfile
	);

	delete @{$main_config}{@expired};
}

# Advisory XML spec
#XXX Probably, the code can not handle incompatible versions of the advisory
#XXX specification (at the moment).  However, let's attempt to collect older
#XXX versions of the spec if available in the source tree.

sub take_advisory_xml_spec() {
	my @templates = bsd_glob "conf/Advisory_XML*";
	my @schemas   = bsd_glob "conf/taranis*.advisory.*.xsd";
	my @used      = map rel2abs($main_config->{$_}, $src),
		qw/advisory_xml_template advisory_xsd/;

	my $adv_home  = create_dir "$var/advisory";

	foreach my $src_fn (@templates, @schemas, @used) {
		my $dest_fn = "$adv_home/".basename $src_fn;
		next if -f $dest_fn;

		print "*   take $dest_fn\n";
		copy_file $src_fn, $dest_fn;
	}

	# Keep the configured preference spec
	$main_config->{$_} =~ s!.*/!var/advisory/!
		for qw/advisory_xml_template advisory_xsd/;
}

# Source icons are the icons which relate to "sources": the monitored
# websites.  These could better be kept in the database, but aren't.

sub take_source_icons() {

	# hardcoded, not in main config
	my $src_icons  = "$src/webinterface/images/icons";

	my $dest_icons = $generic->{source_icons};
	create_dir $dest_icons;

	# This directory can be huge, so let not use glob to figure-out
	# whether it is empty on every install attempt. 
	opendir my $d, $dest_icons or die $dest_icons;
	my $is_empty = 1;
	while($is_empty) {
		my $fn = readdir $d;
		defined($fn) or last;
		next if $fn =~ m!^\.!;
    	$is_empty = 0;
	}
	closedir $d;

	return if $is_empty || ! -d $src_icons;

	print "*   taking $src_icons\n";

	clone_dir $src_icons, $dest_icons;
	chown $userid, $groupid, bsd_glob "$dest_icons/*";
}

sub take_clustering_settings_path() {
	my $src_cluster  = rel2abs 'pm/Taranis/Clustering', $src;
	my $dest_cluster = $release->{clustering};
	create_dir $dest_cluster;

	foreach my $file (bsd_glob "$src_cluster/{BG,common}*") {
    	my $base = basename $file;
    	my $out  = "$dest_cluster/$base";

    	next if -f $out;

        print "*   taking $out\n";
        copy_file $file, $out;
    }

	$main_config->{clustering_settings_path} = 'var/clustering';
}

sub take_cookie_jar() {
	# Cookies jummy!
	my $src_cookies  = rel2abs $main_config->{cookie_jar}, $src;

	my $collector    = "$var/collector";
	my $dest_cookies = "$collector/cookie_jar.txt";
	return if -f $dest_cookies;

	create_dir $collector;
	if(-f $src_cookies) {
		print "*   taking $src_cookies\n";
		copy_file $src_cookies, $dest_cookies;
	} else {
		print "*   the cookie jar will be created later\n";
	}
	

	$main_config->{cookie_jar} = 'var/collector/cookie_jar.txt';
}

sub custom_stats_workdir() {
	# Stat images are calculated over and over again, so do not need to
	# be copied.

	my $custom_stats = "$var/custom-stats";
	create_dir $custom_stats;
	$main_config->{custom_stats} = 'var/custom-stats';
}

sub take_dashboard() {

	# Hard-coded in Taranis/Command/Dashboard.pm,
	# originally hard-coded in # dashboard/dashboard_background.pl
	my $src_layout  = "$src/conf/taranis.conf.dashboard.xml";

	my $dashboard   = "$var/dashboard";
	my $dest_layout = "$dashboard/layout.xml";
	return if -f $dest_layout;

	print "*   taking $src_layout\n";

	create_dir $dashboard;
	copy_file $src_layout, $dest_layout;
}

sub split_downloadpath() {

	# Before 3.4, various components which needed temporary files used a
	# generic 'downloadpath' setting to pinpoint a directory. They are all
	# hard-coded.
	#
	# In some cases, it is useful to keep the downloaded files... those are
	# moved to ~/var/.  Other uses all got a separated directory in $TMPDIR.
	# That directory can get cleaned unexpectedly, hence those directories
	# are re-created (when needed) at each access.

	my @dirs = (
		"$var/cpe-dictionary",
		"$var/cve-descriptions",
		"$var/cve-details"
	);

	create_dir $_ for @dirs;
	chmod 0777, @dirs;       # mod-perl runs with different owner :(

	delete $main_config->{downloadpath};
}

sub take_entitlements() {
	my $src_ent  = rel2abs $main_config->{entitlements}, $src;

	my $website  = "$var/website";
	create_dir $website;

	my $dest_ent = "$website/entitlements.xml";
	return if -f $dest_ent;

	print "*   taking $src_ent\n";

	create_dir $website;
	copy_file $src_ent, $dest_ent;

	$main_config->{entitlements} = 'var/website/entitlements.xml';
}

sub take_identifiersconfig() {
	my $src_idc   = rel2abs $main_config->{identifiersconfig}, $src;

	my $collector = "$var/collector";
	my $dest_idc  = "$collector/identifiers.xml";
	return if -f $dest_idc;

	print "*   taking $src_idc\n";

	create_dir $collector;
	copy_file $src_idc, $dest_idc;

	$main_config->{identifiersconfig} = 'var/collector/identifiers.xml';
}

sub take_phishdownkeysfile() {
	# file belongs to phish-checker backend_tools/checkphish.pl
	my $src_phish  = rel2abs $main_config->{phishdownkeysfile}, $src;
	my $phishing   = "$var/phishing";
	my $dest_phish = "$phishing/downkeys.txt";

    return if -f $dest_phish;
	print "*   taking $src_phish\n";

	create_dir $phishing;
	copy_file $src_phish, $dest_phish;

	$main_config->{phishdownkeysfile} = 'var/phishing/downkeys.txt';
}

sub take_publication_templates() {
	my $src_pubtempl  = rel2abs $main_config->{publication_templates}, $src;
	my $publications  = "$var/publications";
	my $dest_pubtempl = "$publications/templates.xml";

	return if -f $dest_pubtempl;
	print "*   taking $src_pubtempl\n";

	create_dir $publications;
	copy_file $src_pubtempl, $dest_pubtempl;

	$main_config->{publication_templates} = 'var/publications/templates.xml';
}

sub take_shortcutsconfig() {
	my $src_short  = rel2abs $main_config->{shortcutsconfig}, $src;
	my $website    = "$var/website";
	my $dest_short = "$website/path-shortcuts.xml";

	return if -f $dest_short;
	print "*   taking $src_short\n";

	create_dir $website;
	copy_file $src_short, $dest_short;

	$main_config->{shortcutsconfig} = 'var/website/path-shortcuts.xml';
}

sub take_statsconfig() {
	my $src_stats  = rel2abs $main_config->{statsconfig}, $src;
	my $stats      = "$var/stats";
	my $dest_stats = "$stats/external.xml";

	return if -f $dest_stats;
	print "*   taking $src_stats\n";

	create_dir $stats;
	copy_file $src_stats, $dest_stats;

	$main_config->{statsconfig} = 'var/stats/external.xml';
}

sub take_stripsconfig() {
	my $src_strips  = rel2abs $main_config->{stripsconfig}, $src;
	my $collector   = "$var/collector";
	my $dest_strips = "$collector/strips.xml";

	return if -f $dest_strips;
	print "*   taking $src_strips\n";

	create_dir $collector;
	copy_file $src_strips, $dest_strips;

	$main_config->{stripsconfig} = 'var/collector/strips.xml';
}

sub take_tagcloudblacklist() {
	# file belongs to Taranis/TagCloud.pm

	my $src_tagcloud  = rel2abs $main_config->{tagcloud_blacklist}, $src;
	my $dashboard     = "$var/dashboard";
	my $dest_tagcloud = "$dashboard/tagcloud_blacklist.txt";

	return if -f $dest_tagcloud;
	print "*   taking $src_tagcloud\n";

	create_dir $dashboard;
	copy_file $src_tagcloud, $dest_tagcloud;

	$main_config->{tagcloud_blacklist} = 'var/dashboard/tagcloud_blacklist.txt';
}

sub take_toolsconfig() {
	my $src_tools  = rel2abs $main_config->{toolsconfig}, $src;
	my $tools      = "$var/tools";
	my $dest_tools = "$tools/external.xml";

	return if -f $dest_tools;
	print "*   taking $src_tools\n";

	create_dir $tools;
	copy_file $src_tools, $dest_tools;

	$main_config->{toolsconfig} = 'var/tools/external.xml';
}

sub collector_secret() {
	return if $main_config->{collector_secret};

	print "*   generating collector secret\n";

    #XXX created in ::Administration::createSecret(), but all dependencies of
	#XXX that module may not be available here (is a bad location anyway)
	my @chars  = ('A'..'Z', 'a'..'z', 0..9);
	my $secret = join '', map $chars[rand @chars], 1..20;

	$main_config->{collector_secret} = $secret;
}

sub reorder_main_options() {
	remove_expired_options;

	take_advisory_xml_spec;
	take_clustering_settings_path;
	take_cookie_jar;
	custom_stats_workdir;
	take_dashboard;
	split_downloadpath;
	take_entitlements;
	take_identifiersconfig;
	take_phishdownkeysfile;
	take_publication_templates;
	take_shortcutsconfig;
	take_source_icons;
	take_statsconfig;
	take_stripsconfig;
	take_tagcloudblacklist;
	take_toolsconfig;
	collector_secret;
}

sub init_main_emails() {
	my $email = $generic->{admin_email};

	$main_config->{$_} = $email for qw/
		collector_alerter_to_address
		mail_from_address
		maillist
		publish_advisory_from_address
		publish_advisory_to
		publish_eod_from
		publish_eod_to
		publish_eod_to_public
		publish_eos_from
		publish_eos_to
		publish_eow_from
		publish_eow_to
		publish_testing_to
		publish_xml_advisory_to
		/;
}
